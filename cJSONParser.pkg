// cJSONParser class v1.12:
// Created by Erik Svensson and published on eriksven.com in April 2013
// License: LGPLv3 - GNU LESSER GENERAL PUBLIC LICENSE Version 3 - http://www.gnu.org/licenses/lgpl.txt

Define cJSONPARSER_INCLUDED for 1

#IFNDEF cJSONDICTIONARY_INCLUDED
Use cJSONDictionary.pkg
#ENDIF

#IFNDEF cREGEX_INCLUDED
Use cRegex.pkg
#ENDIF

Class cJSONParser is a cObject
    
    Procedure Construct_Object
        Forward Send Construct_Object
        Property String _psPattern '("(\\.|[^"])*"|\[|\]|,|\d{1,}\.\d{1,}|\{|\}|\:|[a-zA-Z0-9_\.]+)'
        Property String psJSON         
        Property Handle phOutDictionary 0
        Property Boolean pbAutoParseMicrosoftDates True
    End_Procedure
    
    { Visibility=Public }
    Function Is_cJSONParser Returns Boolean
        Function_Return True
    End_Function
    
    Function _IsMicrosoftDate String s Returns Boolean
        If (not(pbAutoParseMicrosoftDates(Self))) Function_Return False
        Function_Return (Regex_IsMatch(s, '^\/Date\(\d+((\-|\+)\d{4})?\)\/$', True))
    End_Function
    
    Function _ParseMicrosoftDate String s Returns DateTime
        BigInt iDate iDays iDateOffset
        Integer HH MM SS MS
        DateTime dt1970 dtRetVal
        Date d1970 dDate
        TimeSpan ts
        Get Regex_Replace s "$1" "\/Date\((-?\d+)(\)|-\d+\))\/" True to iDate
        Move (DateSetYear(dt1970, 1970)) to dt1970
        Move (DateSetMonth(dt1970, 1)) to dt1970
        Move (DateSetDay(dt1970, 1)) to dt1970      
        Move (((((iDate/1000)/60)/60)/24)/1) to iDays
        Move (iDate - (iDays * 1000 * 60 * 60 * 24)) to iDateOffset
        Move (((iDateOffset / 1000) / 60) / 60) to HH
        Move (((iDateOffset / 1000) / 60) - (HH*60)) to MM
        Move ((iDateOffset / 1000) - ((HH*60*60) + (MM*60))) to SS
        Move ((iDateOffset) - ((HH*60*60*1000) + (MM*60*1000) + (SS*1000))) to MS
        Move dt1970 to d1970
        Move (d1970 + iDays) to dDate
        Move dDate to dtRetVal
        Move (DateSetHour(dtRetVal, HH)) to dtRetVal
        Move (DateSetMinute(dtRetVal, MM)) to dtRetVal
        Move (DateSetSecond(dtRetVal, SS)) to dtRetVal
        Move (DateSetMillisecond(dtRetVal, MS)) to dtRetVal
        Function_Return dtRetVal
    End_Function

    Procedure _UnEscape String ByRef s
        If (Left(s,1) = '"' and Right(s,1) = '"') Begin
            Move (Right(s,Length(s)-1)) to s
            Move (Left(s, Length(s)-1)) to s
        End
        //Unescaping according to JSON.org
        Move (Replaces('\"',s,'"')) to s
        Move (Replaces('\\',s,'\')) to s
        Move (Replaces('\/',s,'/')) to s
        Move (Replaces('\b',s,Character(8)))  to s
        Move (Replaces('\f',s,Character(12))) to s
        Move (Replaces('\n',s,Character(10))) to s
        Move (Replaces('\r',s,Character(13))) to s
        Move (Replaces('\t',s,Character(9)))  to s
    End_Procedure
    
    Procedure _Isolate Integer iObjStart tRegexMatch[] ByRef tokenized tRegexMatch[] ByRef Isolated String sStarting String sEnding
        Integer i iLevel
        Boolean bClosed

        For i from iObjStart to (SizeOfArray(tokenized)-1)
            If (tokenized[i].Val = sStarting) Begin
                Increment iLevel
            End
            
            If (tokenized[i].Val = sEnding) Begin
                Decrement iLevel
                Move (iLevel = 0) to bClosed
            End
            
            If bClosed Break
        Loop

        Move (CopyArray(tokenized, iObjStart+1, i-1)) to isolated
        
        Function_Return isolated        
    End_Procedure
    
    Function _IsolateObject Integer iObjStart tRegexMatch[] tokenized Returns tRegexMatch[]
        tRegexMatch[] isolated
        Send _Isolate iObjStart (&tokenized) (&isolated) "{" "}"
        Function_Return isolated         
    End_Function

    Function _IsolateArray Integer iObjStart tRegexMatch[] tokenized Returns tRegexMatch[]
        tRegexMatch[] isolated
        Send _Isolate iObjStart (&tokenized) (&isolated) "[" "]"
        Function_Return isolated   
    End_Function
    
    Function _IsBool tRegexMatch val Returns Boolean
        String sJson
        String s
        Get psJSON to sJson
        If (val.Val = "true" or val.Val = "false") Begin
            Move (Mid(sJson, 1, val.FirstIndex)) to s
            If (Mid(sJson, 1, val.FirstIndex) <> '"') Begin
                Function_Return True
            End
        End
        Function_Return False
    End_Function
    
    Function _IsNull tRegexMatch val Returns Boolean
        String sJson
        Get psJSON to sJson
        If (val.Val = "null") Begin
            If (Mid(sJson, 1, val.FirstIndex) <> '"') Begin
                Function_Return True
            End
        End
        Function_Return False
    End_Function

    Function _IsNumeric tRegexMatch val Returns Boolean
        String sJson
        Get psJSON to sJson
        If (Regex_IsMatch(val.Val, "(-)?(\d+)((.|,)\d*)?",True)) Begin
            If (Mid(sJson, 1, val.FirstIndex) <> '"') Begin
                Function_Return True
            End
        End
        Function_Return False
    End_Function

    Procedure _ParseArray Variant[] ByRef vaParent tRegexMatch[] tokenized Integer iLevel Boolean ByRef bIsObjectArray
        Integer i
        String sKey sValue
        Variant vValue
        Handle h
        tRegexMatch[] isolated
        Variant[] va null
        Boolean b
        
        For i from 0 to (SizeOfArray(tokenized)-1)
            
            If (tokenized[i].Val <> "," and tokenized[i].Val <> "}" and tokenized[i].Val <> "]") Begin
            
                //{object}
                If (tokenized[i].Val = "{") Begin
                    Get Create of (phOutDictionary(Self)) U_cJSONDictionary to h
                    Move h to vaParent[(SizeOfArray(vaParent))]
                    Get _IsolateObject i tokenized to isolated
                    Send _ParseObject h isolated (iLevel+1)
                    Add (SizeOfArray(isolated)) to i
                    Move True to bIsObjectArray
                End
                
                //[array]
                Else If (tokenized[i].Val = "[") Begin
                    Move (_IsolateArray(Self, i, tokenized)) to isolated
                    Send _ParseArray (&va) isolated (iLevel+1) (b)
                    Add (SizeOfArray(isolated)) to i
                    Move va to vaParent[(SizeOfArray(vaParent))]
                    Move null to va
                End
                
                //value
                Else Begin
                    Move tokenized[i].Val to vValue
                    Move vValue to sValue
                    Send _UnEscape (&sValue)
                    If (vValue <> sValue) Move sValue to vValue
                    If (_IsMicrosoftDate(Self, vValue)) Begin
                        Get _ParseMicrosoftDate vValue to vValue
                    End
                    Move vValue to vaParent[(SizeOfArray(vaParent))]
                End      
            
            End
            
        Loop
    End_Procedure
    
    Procedure _ParseObject Handle hParent tRegexMatch[] tokenized Integer ByRef iLevel
        Integer i ii
        String sKey sValue sText
        Variant vValue
        Handle h
        Variant[] va null
        tRegexMatch[] isolated
        _jsond_type type
        Boolean bIsObjectArray

        For i from 0 to (SizeOfArray(tokenized)-1)

            //"key":"value"
            If (tokenized[i].Val = ":" and tokenized[i+1].Val <> "{" and tokenized[i+1].Val <> "[") Begin
                Move tokenized[i-1].Val to sKey
                Move tokenized[i+1].Val to vValue
                Move vValue to sValue
                Send _UnEscape (&sKey)
                Send _UnEscape (&sValue)
                If (vValue <> sValue) Move sValue to vValue
                If (_IsMicrosoftDate(Self, vValue)) Begin
                    Get _ParseMicrosoftDate vValue to vValue
                End
                If (_IsBool(Self, tokenized[i+1])) Begin
                   Move _jsond_bool to type 
                End
                Else If (_IsNull(Self, tokenized[i+1])) Begin
                   Move _jsond_null to type 
                End
                Else If (_IsNumeric(Self, tokenized[i+1])) Begin
                   Move _jsond_number to type 
                End
                Else Begin
                    Move _jsond_unspecified to type
                End
                Set TypedValue of hParent sKey type to vValue
            End
            
            //"key":{object}
            Else If (tokenized[i].Val = ":" and tokenized[i+1].Val = "{") Begin
                Get Create of (phOutDictionary(Self)) U_cJSONDictionary to h
                Move tokenized[i-1].Val to sKey
                Send _UnEscape (&sKey)
                Set TypedValue of hParent sKey _jsond_object to h
                Increment iLevel
                Move (_IsolateObject(Self, i+1, tokenized)) to isolated
                Add (SizeOfArray(isolated)) to i
                Send _ParseObject h isolated (&iLevel)    
            End
            
            //"key":[array]
            Else If (tokenized[i].Val = ":" and tokenized[i+1].Val = "[") Begin
                Move tokenized[i-1].Val to sKey
                Send _UnEscape (&sKey)
                Move (_IsolateArray(Self, i+1, tokenized)) to isolated
                Move False to bIsObjectArray
                Send _ParseArray (&va) isolated (&iLevel) (&bIsObjectArray)
                Add (SizeOfArray(isolated)) to i
                If (bIsObjectArray) Set TypedValue of hParent sKey _jsond_object_array to va
                Else Set TypedValue of hParent sKey _jsond_array to va
                Move null to va
            End            
        Loop

    End_Procedure
    
    Function _IsValidJSON String sJSON Returns Boolean
        Trim sJSON to sJSON
        If (Left(sJSON,1) <> "{" and Left(sJSON,1) <> "[") Begin
            Function_Return False
        End
        Else If (Right(sJSON,1) <> "}" and Right(sJSON,1) <> "]") Begin
            Function_Return False
        End
        Function_Return True
    End_Function
    
    Function _IsObject String sJSON Returns Handle
        Function_Return (Left(sJSON,1) = "{")
    End_Function
    
    { Visibility=Public }
    Procedure Parse String sJSON Handle Out_hJSONDictionary
        tRegexMatch[] tokenized
        Variant[] va
        Boolean b
        
        If (not(_IsValidJSON(Self, sJSON))) Begin
            Move False to Found
            Move True to FindErr
            Procedure_Return
        End
        
        Set phOutDictionary to Out_hJSONDictionary
        
        Set psJSON to sJSON

        Get Regex_Match sJSON (_psPattern(Self)) True to tokenized

        Integer iLevel
        Move 0 to iLevel
        If (_IsObject(Self, sJSON)) Begin
            Send _ParseObject Out_hJSONDictionary (_IsolateObject(Self, 0, tokenized)) (&iLevel)
        End
        Else Begin
            Send _ParseArray (&va) (_IsolateArray(Self, 0, tokenized)) (&iLevel) (&b)
            Set Value of Out_hJSONDictionary "_array" to va
        End
        
        Move True to Found
        Move False to FindErr
    End_Procedure

End_Class